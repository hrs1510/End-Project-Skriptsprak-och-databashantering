<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js" />
              <option name="originalContent" value="const API_KEY = '2a61739e21f2ca9dca35f8447613169f';  // Api key for themoviedb generated from account&#10;const BASE_URL = 'https://api.themoviedb.org/3';      // Base URL for The Popular Movies Database API&#10;const Poster_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for movie posters&#10;&#10;// container: try several common ids&#10;const movie = document.getElementById('results') || document.getElementById('movies-container') || document.getElementById('movie');&#10;// popular movies URL&#10;const movie_url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;async function movieData() {&#10;  if (!movie) {&#10;    console.error('No movie container found (ids: results / movies-container / movie)');&#10;    return;&#10;  }&#10;&#10;  const response = await fetch(movie_url);&#10;  if (!response.ok) throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);&#10;  const data = await response.json();&#10;  const results = Array.isArray(data.results) ? data.results : [];&#10;&#10;  // SIMPLE PAGINATION (10 per page) using Prev / Next only&#10;  const pageSize = 10;&#10;  let currentPage = 1;&#10;  const totalPages = Math.max(1, Math.ceil(results.length / pageSize));&#10;&#10;  function renderPage(page) {&#10;    currentPage = Math.min(Math.max(1, page), totalPages); // to keep page in bounds, by calculating max of 1 and page which is values then min of that and totalPages&#10;    const start = (currentPage - 1) * pageSize;  // calculate start index of current page&#10;    const pageItems = results.slice(start, start + pageSize);   // to get movies for current page. it shows from which index to which index.&#10;&#10;    // clear container&#10;    movie.innerHTML = '';&#10;&#10;    // build list for current page&#10;    const ul = document.createElement('ul');&#10;    ul.className = 'movie-list';&#10;&#10;    pageItems.forEach(item =&gt; {&#10;      const li = document.createElement('li');&#10;      li.className = 'movie-item';&#10;&#10;      // add poster image if available&#10;      if (item.poster_path) {&#10;        const img = document.createElement('img');&#10;        img.className = 'movie-poster';&#10;        img.src = Poster_URL + item.poster_path;&#10;        img.alt = item.title || 'Poster';&#10;        img.loading = 'lazy';&#10;        img.width = 100; // small thumbnail; change as needed or style via CSS&#10;        li.appendChild(img);&#10;      }&#10;&#10;      const title = document.createElement('div');&#10;      title.className = 'movie-title';&#10;      title.textContent = item.title || 'Untitled';&#10;      li.appendChild(title);&#10;&#10;      const year = document.createElement('div');&#10;      year.className = 'movie-year';&#10;      year.textContent = item.release_date ? new Date(item.release_date).getFullYear() : '';&#10;      li.appendChild(year);&#10;&#10;      ul.appendChild(li);&#10;    });&#10;&#10;    movie.appendChild(ul);&#10;&#10;    // simple controls: Prev / Page X of Y / Next&#10;    const controls = document.createElement('div');&#10;    controls.className = 'pagination-controls';&#10;&#10;    const prev = document.createElement('button');&#10;    prev.textContent = 'Prev';&#10;    prev.disabled = currentPage === 1;&#10;    prev.addEventListener('click', () =&gt; renderPage(currentPage - 1));&#10;    controls.appendChild(prev);&#10;&#10;    const info = document.createElement('span');&#10;    info.textContent = ` Page ${currentPage} of ${totalPages} `;&#10;    controls.appendChild(info);&#10;&#10;    const next = document.createElement('button');&#10;    next.textContent = 'Next';&#10;    next.disabled = currentPage === totalPages;&#10;    next.addEventListener('click', () =&gt; renderPage(currentPage + 1));&#10;    controls.appendChild(next);&#10;&#10;    movie.appendChild(controls);&#10;  }&#10;&#10;  // initial render&#10;  renderPage(1);&#10;}&#10;&#10;// invoke and handle errors without try/catch inside the function&#10;movieData().catch(err =&gt; {&#10;  console.error(err);&#10;  if (movie) movie.textContent = 'Failed to load movies.';&#10;});&#10;" />
              <option name="updatedContent" value="const API_KEY = '2a61739e21f2ca9dca35f8447613169f';  // Api key for themoviedb generated from account&#10;const BASE_URL = 'https://api.themoviedb.org/3';      // Base URL for The Popular Movies Database API&#10;const Poster_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for movie posters&#10;&#10;// container: try several common ids&#10;const movie = document.getElementById('movies-container') || document.getElementById('results') || document.getElementById('movie');&#10;// select the logo element (class &quot;logo&quot; in your HTML). Use a guard in case it doesn't exist.&#10;const logo = document.querySelector('.logo');&#10;// popular movies URL&#10;const movie_url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;async function movieData() {&#10;  if (!movie) {&#10;    console.error('No movie container found (ids: results / movies-container / movie)');&#10;    return;&#10;  }&#10;&#10;  // fetch popular movies data from API&#10;  const response = await fetch(movie_url);&#10;  if (!response.ok) throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);&#10;  const data = await response.json();  // parse response as JSON&#10;  const results = data.results;&#10;&#10;  // Pagination setUp (10 per page)&#10;  const pageSize = 10;  // number of movies to show per page&#10;  let currentPage = 1;   // current page number&#10;  const totalPages = Math.max(1, Math.ceil(results.length / pageSize)); // calculate total pages based on results length and page size&#10;&#10;  // function to render a specific page of movies(e.g., page 1, page 2, etc.) depends on user interaction.&#10;  function renderPage(page) {&#10;    currentPage = Math.min(Math.max(1, page), totalPages); // to keep page in bounds, by calculating max of 1 and page which is values then min of that and totalPages&#10;    // (do not attach event listeners inside renderPage) — rendering only updates the DOM for the current page&#10;    const start = (currentPage - 1) * pageSize;  // calculate start index of current page&#10;    const pageItems = results.slice(start, start + pageSize);   // to get movies for current page. it shows from which index to which index.&#10;    console.log(pageItems);&#10;&#10;    // clear container&#10;    movie.innerHTML = ''; // we are clearing the movie container before rendering new content because we want to replace the old content with the new page content.&#10;&#10;    // build list for current page&#10;    const ul = document.createElement('ul'); // create unordered list element as a container for movie items&#10;    ul.className = 'movie-list';&#10;&#10;    // loop through each movie item for the current page&#10;    pageItems.forEach(item =&gt; {&#10;      const li = document.createElement('li'); // create list item for each movie&#10;      li.className = 'movie-item';&#10;&#10;      // add poster image if available&#10;      if (item.poster_path) {  // check if poster path is available&#10;        const img = document.createElement('img');  // create image element for movie poster&#10;        img.className = 'movie-poster';&#10;        img.src = Poster_URL + item.poster_path;  //&#10;        img.alt = item.title ;&#10;        img.width = 200; // small thumbnail; change as needed or style via CSS&#10;        li.appendChild(img);&#10;      }&#10;&#10;      // to show moviw title&#10;      const title = document.createElement('div');&#10;      title.className = 'movie-title';&#10;      title.textContent = item.title || 'Untitled';&#10;      li.appendChild(title);&#10;&#10;      // to show moviw overview&#10;      const overView = document.createElement('p');&#10;      overView.className = 'movie-overView';&#10;      overView.textContent = item.overview&#10;        || 'No overview available.';&#10;      li.appendChild(overView);&#10;&#10;      // to show movie popularity&#10;      const popularity = document.createElement('div');&#10;      popularity.className = 'movie-popularity';&#10;      popularity.textContent = `Popularity: ${item.popularity || 'N/A'}`;&#10;      li.appendChild(popularity);&#10;&#10;      ul.appendChild(li); // append list item to unordered list&#10;    });&#10;&#10;    movie.appendChild(ul);  // append unordered list to main container&#10;&#10;&#10;    // simple controls: Prev/Next pagebuttons&#10;&#10;    const pageNumberbutton = document.createElement('div');&#10;    pageNumberbutton.className = 'pagination-controls';&#10;&#10;    // show page navigation buttons (uncomment to enable)&#10;    const prev = document.createElement('button');&#10;    prev.textContent = 'Prev';&#10;    prev.disabled = currentPage === 1;  // disable prev button when current page is  first page&#10;    prev.addEventListener('click', () =&gt; renderPage(currentPage - 1));&#10;    /*we are adding an event listener to the prev button so that when it is clicked,&#10;    it will call the renderPage function with the current page number decremented by 1.*/&#10;    pageNumberbutton.appendChild(prev);   // append prev button to pagination controls&#10;&#10;    // show only page number info without prev/next buttons&#10;    const pageInfo = document.createElement('span');&#10;    pageInfo.textContent = ` Page ${currentPage} of ${totalPages} `;&#10;    pageNumberbutton.appendChild(pageInfo);&#10;&#10;    // show next button&#10;    const next = document.createElement('button');&#10;    next.textContent = 'Next';&#10;    next.disabled = currentPage === totalPages;  // disable next button when current page is last page&#10;    next.addEventListener('click', () =&gt; renderPage(currentPage + 1));&#10;    /* we are adding event listner to the next page , onClick to next button it will call&#10;    renderPage Function with current page number increased by 1*/&#10;    pageNumberbutton.appendChild(next);&#10;&#10;    movie.appendChild(pageNumberbutton);&#10;  }&#10;&#10;  // initial render&#10;  renderPage(1);&#10;&#10;  // attach a single click listener to the logo (outside renderPage) so clicking it shows page 1&#10;  if (logo) {&#10;    logo.addEventListener('click', (e) =&gt; {&#10;      e.preventDefault &amp;&amp; e.preventDefault();&#10;      renderPage(1);&#10;    });&#10;  }&#10;&#10;}&#10;&#10;// invoke and handle errors without try/catch inside the function&#10;movieData().catch(err =&gt; {&#10;  console.error(err);&#10;  if (movie) movie.textContent = 'Failed to load movies.';&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
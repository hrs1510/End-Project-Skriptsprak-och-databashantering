<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js" />
              <option name="originalContent" value="const API_KEY = &quot;2a61739e21f2ca9dca35f8447613169f&quot;;&#10;const BASE_URL = &quot;https://api.themoviedb.org/3&quot;;&#10;const IMG_BASE = &quot;https://image.tmdb.org/t/p/w500&quot;;&#10;&#10;// Wait for DOM to ensure the #results container exists&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;  const container = document.getElementById('results');&#10;  if (!container) {&#10;    console.error('No element with id &quot;results&quot; found in the document.');&#10;    return;&#10;  }&#10;&#10;  container.textContent = 'Loading movies…';&#10;&#10;  const url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;  fetch(url)&#10;    .then(res =&gt; {&#10;      if (!res.ok) throw new Error(`Network response was not ok: ${res.status}`);&#10;      return res.json();&#10;    })&#10;    .then(data =&gt; {&#10;      const movies = Array.isArray(data.results) ? data.results : [];&#10;      if (movies.length === 0) {&#10;        container.textContent = 'No movies found.';&#10;        return;&#10;      }&#10;&#10;      container.innerHTML = movies.map(movie =&gt; {&#10;        const title = escapeHtml(movie.title || 'Untitled');&#10;        const poster = movie.poster_path ? `${IMG_BASE}${movie.poster_path}` : null;&#10;        const vote = movie.vote_average ?? 'N/A';&#10;        const date = movie.release_date ?? '';&#10;&#10;        return `&#10;          &lt;div class=&quot;card&quot;&gt;&#10;            ${poster ? `&lt;img src=&quot;${poster}&quot; alt=&quot;${title}&quot;&gt;` : ''}&#10;            &lt;h3&gt;${title}&lt;/h3&gt;&#10;            &lt;p&gt;⭐ ${vote}&lt;/p&gt;&#10;            &lt;p&gt;${date}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        `;&#10;      }).join('');&#10;    })&#10;    .catch(err =&gt; {&#10;      console.error('Failed to load movies:', err);&#10;      container.textContent = 'Failed to load movies. See console for details.';&#10;    });&#10;});&#10;&#10;// Minimal HTML-escaping helper&#10;function escapeHtml(str) {&#10;  return String(str).replace(/[&amp;&lt;&gt;&quot;']/g, s =&gt; ({&#10;    '&amp;': '&amp;amp;',&#10;    '&lt;': '&amp;lt;',&#10;    '&gt;': '&amp;gt;',&#10;    '&quot;': '&amp;quot;',&#10;    &quot;'&quot;: '&amp;#39;'&#10;  }[s]));&#10;}&#10;&#10;" />
              <option name="updatedContent" value="const API_KEY = &quot;2a61739e21f2ca9dca35f8447613169f&quot;;&#10;const BASE_URL = &quot;https://api.themoviedb.org/3&quot;;&#10;const options = {&#10;  method: 'GET',&#10;  headers: {&#10;    accept: 'application/json',&#10;    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyYTYxNzM5ZTIxZjJjYTlkY2EzNWY4NDQ3NjEzMTY5ZiIsIm5iZiI6MTc2MDY0Njk0NC4zOTYsInN1YiI6IjY4ZjE1NzIwYmZjNTZlYmFjNTFlMjMyYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4uKFLTWJMHZEnexIkFDSOgxEcWPrvLdTuK3hleMOzk0'&#10;  }&#10;};&#10;const IMG_BASE = 'https://image.tmdb.org/t/p/w500'; // use other sizes (w200,w300,w780,original) as needed&#10;&#10;// Wait for DOM to ensure the #results container exists&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;  const container = document.getElementById('results');&#10;  if (!container) {&#10;    console.error('No element with id &quot;results&quot; found in the document.');&#10;    return;&#10;  }&#10;&#10;  container.textContent = 'Loading movies…';&#10;&#10;  const url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;  fetch(url)&#10;    .then(res =&gt; {&#10;      if (!res.ok) throw new Error(`Network response was not ok: ${res.status}`);&#10;      return res.json();&#10;    })&#10;    .then(data =&gt; {&#10;      const movies = Array.isArray(data.results) ? data.results : [];&#10;      // find or create results container&#10;      let container = document.getElementById('results');&#10;      if (!container) {&#10;        container = document.createElement('div');&#10;        container.id = 'results';&#10;        const main = document.querySelector('main') || document.body;&#10;        main.appendChild(container);&#10;      }&#10;&#10;      container.innerHTML = ''; // clear previous content&#10;&#10;      if (movies.length === 0) {&#10;        container.textContent = 'No movies found.';&#10;        return;&#10;      }&#10;&#10;      movies.forEach(movie =&gt; {&#10;        const card = document.createElement('div');&#10;        card.className = 'card';&#10;&#10;        if (movie.poster_path) {&#10;          const img = document.createElement('img');&#10;          img.src = IMG_BASE + movie.poster_path;&#10;          img.alt = movie.title || 'Movie poster';&#10;          img.loading = 'lazy';&#10;          card.appendChild(img);&#10;        } else {&#10;          const placeholder = document.createElement('div');&#10;          placeholder.className = 'poster-placeholder';&#10;          placeholder.textContent = 'No image';&#10;          card.appendChild(placeholder);&#10;        }&#10;&#10;        const h3 = document.createElement('h3');&#10;        h3.textContent = movie.title || 'Untitled';&#10;        card.appendChild(h3);&#10;&#10;        const p = document.createElement('p');&#10;        p.textContent = `⭐ ${movie.vote_average ?? 'N/A'} — ${movie.release_date ?? ''}`;&#10;        card.appendChild(p);&#10;&#10;        container.appendChild(card);&#10;      });&#10;    })&#10;    .catch(err =&gt; {&#10;      console.error('Failed to load movies:', err);&#10;      container.textContent = 'Failed to load movies. See console for details.';&#10;    });&#10;});&#10;&#10;// Minimal HTML-escaping helper&#10;function escapeHtml(str) {&#10;  return String(str).replace(/[&amp;&lt;&gt;&quot;']/g, s =&gt; ({&#10;    '&amp;': '&amp;amp;',&#10;    '&lt;': '&amp;lt;',&#10;    '&gt;': '&amp;gt;',&#10;    '&quot;': '&amp;quot;',&#10;    &quot;'&quot;: '&amp;#39;'&#10;  }[s]));&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
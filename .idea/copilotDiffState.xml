<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/css/style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/css/style.css" />
              <option name="originalContent" value="/* Basic reset */&#10;* { box-sizing: border-box; }&#10;html, body { margin: 0; padding: 0; }&#10;&#10;/* Header layout */&#10;.header-box {&#10;  background-color: #43bdbd;&#10;  padding: 12px 20px;&#10;  display: flex;&#10;  align-items: center; /* vertically center items */&#10;  justify-content: space-between; /* left / center / right alignment */&#10;  gap: 1rem; /* space between items */&#10;  border-bottom: 2px solid #dee2e6;&#10;  flex-wrap: nowrap; /* keep children on one row on larger screens */&#10;}&#10;&#10;/* Prevent default margins inside header */&#10;.header-box h1,&#10;.header-box p,&#10;.header-box a {&#10;  margin: 0;&#10;}&#10;&#10;.logo {&#10;  font-size: 24px;&#10;  font-weight: bold;&#10;  color: #ffffff;&#10;  text-decoration: none;&#10;  display: inline-block;&#10;  flex: 0 0 auto; /* don't grow or shrink */&#10;}&#10;&#10;/* Main nav: allow to grow and shrink, but start from 0 so it evenly shares space */&#10;.main-nav {&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;  display: flex;&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  align-items: center;&#10;  flex: 1 1 0; /* grow and shrink; start from 0 to evenly distribute */&#10;  min-width: 0; /* important so flex children can shrink inside flex container */&#10;}&#10;&#10;/* Ensure nav list items don't force wider sizes */&#10;.main-nav li { margin: 0; white-space: nowrap; }&#10;.main-nav a { color: #fff; text-decoration: none; padding: 6px 8px; display: inline-block; }&#10;&#10;/* Search box should not grow and stays on the right */&#10;.search-box { display: flex; gap: 6px; align-items: center; flex: 0 0 auto; }&#10;/* Allow search input to shrink; limit max width so it doesn't force wrapping */&#10;.search-box input[type=&quot;search&quot;] { padding: 6px 8px; border-radius: 4px; border: 1px solid rgba(0,0,0,0.1); min-width: 0; max-width: 220px; }&#10;.search-box button { padding: 6px 10px; border-radius: 4px; border: none; background: #0b7285; color: #fff; cursor: pointer; }&#10;&#10;/* Movie list: show 3 items per row, responsive down to 2 and 1 */&#10;.movie-list {&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  gap: 20px;&#10;  align-items: start;&#10;}&#10;&#10;.movie-item {&#10;  background: #ffffff;&#10;  padding: 12px;&#10;  border-radius: 8px;&#10;  box-shadow: 0 1px 6px rgba(0,0,0,0.08);&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;}&#10;&#10;.movie-item .movie-title {&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  color: #222;&#10;}&#10;&#10;.movie-item .movie-year {&#10;  color: #666;&#10;  font-size: 14px;&#10;}&#10;&#10;.movie-poster {&#10;  width: 100%;&#10;  height: auto;&#10;  display: block;&#10;  border-radius: 6px;&#10;}&#10;&#10;/* Responsive: 2 columns on medium, 1 column on small screens */&#10;@media (max-width: 900px) {&#10;  .movie-list { grid-template-columns: repeat(2, 1fr); }&#10;}&#10;@media (max-width: 640px) {&#10;  .header-box { flex-wrap: wrap; padding: 10px 12px; }&#10;  .main-nav { width: 100%; justify-content: center; }&#10;  .search-box { width: 100%; justify-content: center; }&#10;  .movie-list { grid-template-columns: 1fr; }&#10;}&#10;@media (max-width: 520px) {&#10;  .movie-list { grid-template-columns: 1fr; }&#10;}&#10;" />
              <option name="updatedContent" value="/* Basic reset */&#10;* { box-sizing: border-box; }&#10;html, body { margin: 0; padding: 0; }&#10;&#10;/* Header layout */&#10;.header-box {&#10;  background-color: #43bdbd;&#10;  padding: 12px 20px;&#10;  display: flex;&#10;  align-items: center; /* vertically center items */&#10;  justify-content: space-between; /* left / center / right alignment */&#10;  gap: 1rem; /* space between items */&#10;  border-bottom: 2px solid #dee2e6;&#10;  flex-wrap: nowrap; /* keep children on one row on larger screens */&#10;}&#10;&#10;/* Prevent default margins inside header */&#10;.header-box h1,&#10;.header-box p,&#10;.header-box a {&#10;  margin: 0;&#10;}&#10;&#10;.logo {&#10;  font-size: 24px;&#10;  font-weight: bold;&#10;  color: #ffffff;&#10;  text-decoration: none;&#10;  display: inline-block;&#10;  flex: 0 0 auto; /* don't grow or shrink */&#10;}&#10;&#10;/* Main nav: allow to grow and shrink, but start from 0 so it evenly shares space */&#10;.main-nav {&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;  display: flex;&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  align-items: center;&#10;  flex: 1 1 0; /* grow and shrink; start from 0 to evenly distribute */&#10;  min-width: 0; /* important so flex children can shrink inside flex container */&#10;}&#10;&#10;/* Ensure nav list items don't force wider sizes */&#10;.main-nav li { margin: 0; white-space: nowrap; }&#10;.main-nav a { color: #fff; text-decoration: none; padding: 6px 8px; display: inline-block; }&#10;&#10;/* Search box should not grow and stays on the right */&#10;.search-box { display: flex; gap: 6px; align-items: center; flex: 0 0 auto; }&#10;/* Allow search input to shrink; limit max width so it doesn't force wrapping */&#10;.search-box input[type=&quot;search&quot;] { padding: 6px 8px; border-radius: 4px; border: 1px solid rgba(0,0,0,0.1); min-width: 0; max-width: 220px; }&#10;.search-box button { padding: 6px 10px; border-radius: 4px; border: none; background: #0b7285; color: #fff; cursor: pointer; }&#10;&#10;/* Movie list: show 3 items per row, responsive down to 2 and 1 */&#10;.movie-list {&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  gap: 20px;&#10;  align-items: start;&#10;}&#10;&#10;.movie-item {&#10;  background: #c7efef;&#10;  padding: 12px; /* equal padding on all sides */&#10;  border-radius: 8px;&#10;  box-shadow: 0 1px 6px rgba(0,0,0,0.08);&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;  align-items: center; /* center contents so poster and title look aligned */&#10;  height: 360px;            /* fixed card height so all cards match */&#10;  box-sizing: border-box;&#10;  overflow: hidden;         /* ensure content doesn't overflow card by default */&#10;}&#10;&#10;/* When a card is expanded, allow it to grow to fit content */&#10;.movie-item.expanded {&#10;  height: auto;&#10;}&#10;&#10;.movie-item .movie-title {&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  color: #222;&#10;  text-align: center;&#10;}&#10;&#10;.movie-item .movie-year {&#10;  color: #666;&#10;  font-size: 14px;&#10;}&#10;&#10;.movie-poster {&#10;  width: 120px;            /* small fixed width */&#10;  height: 180px;          /* fixed height for consistent cards */&#10;  object-fit: cover;      /* crop/scale nicely */&#10;  display: block;&#10;  margin: 0 auto;         /* center inside the card */&#10;  border-radius: 6px;&#10;}&#10;&#10;/* clamp overview to 3 lines with ellipsis */&#10;.movie-overView {&#10;  color: #333;&#10;  font-size: 14px;&#10;  line-height: 1.3;&#10;  margin: 8px 0 0 0;&#10;  /* multi-line clamp */&#10;  display: -webkit-box;&#10;  -webkit-box-orient: vertical;&#10;  -webkit-line-clamp: 3;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;  max-width: 100%;&#10;  text-align: left;&#10;}&#10;&#10;/* when expanded, remove the clamp */&#10;.movie-overView.expanded {&#10;  -webkit-line-clamp: unset;&#10;  display: block;&#10;}&#10;&#10;/* See more button */&#10;.see-more {&#10;  background: transparent;&#10;  border: none;&#10;  color: #2e67ba;&#10;  cursor: pointer;&#10;  padding: 4px 6px;&#10;  font-size: 13px;&#10;  align-self: flex-start;&#10;}&#10;&#10;/* Small responsive tweak */&#10;@media (max-width: 900px) {&#10;  .movie-list { grid-template-columns: repeat(2, 1fr); }&#10;}&#10;@media (max-width: 640px) {&#10;  .header-box { flex-wrap: wrap; padding: 10px 12px; }&#10;  .main-nav { width: 100%; justify-content: center; }&#10;  .search-box { width: 100%; justify-content: center; }&#10;  .movie-list { grid-template-columns: 1fr; }&#10;  .movie-item { height: auto; } /* let cards grow naturally on small screens */&#10;}&#10;@media (max-width: 520px) {&#10;  .movie-list { grid-template-columns: 1fr; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../End Project - Skriptspråk och.databashantering/js/app.js" />
              <option name="originalContent" value="const API_KEY = '2a61739e21f2ca9dca35f8447613169f';  // Api key for themoviedb generated from account&#10;const BASE_URL = 'https://api.themoviedb.org/3';      // Base URL for The Popular Movies Database API&#10;const Poster_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for movie posters&#10;&#10;// container: try several common ids&#10;const movie = document.getElementById('results') || document.getElementById('movies-container') || document.getElementById('movie');&#10;// popular movies URL&#10;const movie_url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;async function movieData() {&#10;  if (!movie) {&#10;    console.error('No movie container found (ids: results / movies-container / movie)');&#10;    return;&#10;  }&#10;&#10;  const response = await fetch(movie_url);&#10;  if (!response.ok) throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);&#10;  const data = await response.json();  // parse response as JSON&#10;  const results = data.results;&#10;  const data = await response.json();&#10;  const results = Array.isArray(data.results) ? data.results : [];&#10;  const pageSize = 10;  // number of movies to show per page&#10;  let currentPage = 1;   // current page number&#10;  // SIMPLE PAGINATION (10 per page) using Prev / Next only&#10;  const pageSize = 10;&#10;  let currentPage = 1;&#10;  const totalPages = Math.max(1, Math.ceil(results.length / pageSize));&#10;    currentPage = Math.min(Math.max(1, page), totalPages); // to keep page in bounds, by calculating max of 1 and page which is values then min of that and totalPages&#10;    const start = (currentPage - 1) * pageSize;  // calculate start index of current page&#10;    const pageItems = results.slice(start, start + pageSize);   // to get movies for current page. it shows from which index to which index.&#10;&#10;    // clear container&#10;    movie.innerHTML = ''; // we are clearing the movie container before rendering new content because we want to replace the old content with the new page content.&#10;    // build list for current page&#10;    const ul = document.createElement('ul'); // create unordered list element as a container for movie items&#10;    ul.className = 'movie-list';&#10;    movie.innerHTML = '';&#10;    // loop through each movie item for the current page&#10;    pageItems.forEach(item =&gt; {&#10;      const li = document.createElement('li'); // create list item for each movie&#10;    const ul = document.createElement('ul');&#10;&#10;      // add poster image if available&#10;        const img = document.createElement('img');  // create image element for movie poster&#10;      const li = document.createElement('li');&#10;        img.src = Poster_URL + item.poster_path;  //&#10;        img.alt = item.title ;&#10;        img.width = 200; // small thumbnail; change as needed or style via CSS&#10;        li.appendChild(img);&#10;      if (item.poster_path) {&#10;        const img = document.createElement('img');&#10;      // to show moviw title&#10;        img.src = Poster_URL + item.poster_path;&#10;        img.alt = item.title || 'Poster';&#10;        img.loading = 'lazy';&#10;        img.width = 100; // small thumbnail; change as needed or style via CSS&#10;      li.appendChild(title);&#10;&#10;      // to show moviw overview&#10;      overView.className = 'movie-overView';&#10;      overView.textContent = item.overview&#10;        || 'No overview available.';&#10;      li.appendChild(overView);&#10;      const year = document.createElement('div');&#10;      year.className = 'movie-year';&#10;      year.textContent = item.release_date ? new Date(item.release_date).getFullYear() : '';&#10;      li.appendChild(year);&#10;&#10;    // simple controls: Prev/Next pagebuttons&#10;      ul.appendChild(li);&#10;    const pageNumberbutton = document.createElement('div');&#10;    pageNumberbutton.className = 'pagination-controls';&#10;&#10;    // show page navigation buttons (uncomment to enable)&#10;    const prev = document.createElement('button');&#10;    prev.textContent = 'Prev';&#10;    prev.disabled = currentPage === 1;  // disable prev button when current page is  first page&#10;    prev.addEventListener('click', () =&gt; renderPage(currentPage - 1));&#10;    /*we are adding an event listener to the prev button so that when it is clicked,&#10;    it will call the renderPage function with the current page number decremented by 1.*/&#10;    movie.appendChild(ul);&#10;&#10;    // simple controls: Prev / Page X of Y / Next&#10;    const controls = document.createElement('div');&#10;    controls.className = 'pagination-controls';&#10;    prev.disabled = currentPage === 1;&#10;    next.textContent = 'Next';&#10;    next.disabled = currentPage === totalPages;  // disable next button when current page is last page&#10;    next.addEventListener('click', () =&gt; renderPage(currentPage + 1));&#10;    /* we are adding event listner to the next page , onClick to next button it will call&#10;    renderPage Function with current page number increased by 1*/&#10;    pageNumberbutton.appendChild(next);&#10;&#10;    controls.appendChild(prev);&#10;  // initial render&#10;    const info = document.createElement('span');&#10;    info.textContent = ` Page ${currentPage} of ${totalPages} `;&#10;    controls.appendChild(info);&#10;    logo.addEventListener('click', (e) =&gt; {&#10;      e.preventDefault &amp;&amp; e.preventDefault();&#10;      renderPage(1);&#10;  }&#10;&#10;}&#10;    next.disabled = currentPage === totalPages;&#10;// invoke and handle errors without try/catch inside the function&#10;movieData().catch(err =&gt; {&#10;    controls.appendChild(next);&#10;" />
              <option name="updatedContent" value="const API_KEY = '2a61739e21f2ca9dca35f8447613169f';  // Api key for themoviedb generated from account&#10;const BASE_URL = 'https://api.themoviedb.org/3';      // Base URL for The Popular Movies Database API&#10;const Poster_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for movie posters&#10;&#10;// container: try several common ids&#10;const movie = document.getElementById('movies-container') || document.getElementById('results') || document.getElementById('movie');&#10;// select the logo element (class &quot;logo&quot; in your HTML). Use a guard in case it doesn't exist.&#10;const logo = document.querySelector('.logo');&#10;// popular movies URL&#10;const movie_url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&amp;language=en-US&amp;page=1`;&#10;&#10;async function movieData() {&#10;  if (!movie) {&#10;    console.error('No movie container found (ids: results / movies-container / movie)');&#10;    return;&#10;  }&#10;&#10;  // fetch popular movies data from API&#10;  const response = await fetch(movie_url);&#10;  if (!response.ok) throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);&#10;  const data = await response.json();  // parse response as JSON&#10;  const results = data.results;&#10;&#10;  // Pagination setUp (10 per page)&#10;  const pageSize = 10;  // number of movies to show per page&#10;  let currentPage = 1;   // current page number&#10;  const totalPages = Math.max(1, Math.ceil(results.length / pageSize)); // calculate total pages based on results length and page size&#10;&#10;  // function to render a specific page of movies(e.g., page 1, page 2, etc.) depends on user interaction.&#10;  function renderPage(page) {&#10;    currentPage = Math.min(Math.max(1, page), totalPages); // to keep page in bounds, by calculating max of 1 and page which is values then min of that and totalPages&#10;    // (do not attach event listeners inside renderPage) — rendering only updates the DOM for the current page&#10;    const start = (currentPage - 1) * pageSize;  // calculate start index of current page&#10;    const pageItems = results.slice(start, start + pageSize);   // to get movies for current page. it shows from which index to which index.&#10;    console.log(pageItems);&#10;&#10;    // clear container&#10;    movie.innerHTML = ''; // we are clearing the movie container before rendering new content because we want to replace the old content with the new page content.&#10;&#10;    // build list for current page&#10;    const ul = document.createElement('ul'); // create unordered list element as a container for movie items&#10;    ul.className = 'movie-list';&#10;&#10;    // loop through each movie item for the current page&#10;    pageItems.forEach(item =&gt; {&#10;      const li = document.createElement('li');&#10;      li.className = 'movie-item';&#10;&#10;      // add poster image if available&#10;      if (item.poster_path) {&#10;        const img = document.createElement('img');&#10;        img.className = 'movie-poster';&#10;        img.src = Poster_URL + item.poster_path;&#10;        img.alt = item.title ;&#10;        img.width = 200; // small thumbnail; change as needed or style via CSS&#10;        li.appendChild(img);&#10;      }&#10;&#10;      // title&#10;      const title = document.createElement('div');&#10;      title.className = 'movie-title';&#10;      title.textContent = item.title || 'Untitled';&#10;      li.appendChild(title);&#10;&#10;      // overview (full text) but visually clamped by CSS&#10;      const overviewText = item.overview || 'No overview available.';&#10;      const overView = document.createElement('p');&#10;      overView.className = 'movie-overView';&#10;      overView.textContent = overviewText;&#10;      li.appendChild(overView);&#10;&#10;      // if overview is long, add a see-more toggle that expands the card&#10;      const LONG_THRESHOLD = 220; // characters threshold to show See more&#10;      if (overviewText.length &gt; LONG_THRESHOLD) {&#10;        const seeMore = document.createElement('button');&#10;        seeMore.className = 'see-more';&#10;        seeMore.type = 'button';&#10;        seeMore.textContent = 'See more';&#10;        seeMore.addEventListener('click', () =&gt; {&#10;          const expanded = overView.classList.toggle('expanded');&#10;          li.classList.toggle('expanded', expanded); // allow card to grow&#10;          seeMore.textContent = expanded ? 'Show less' : 'See more';&#10;        });&#10;        li.appendChild(seeMore);&#10;      }&#10;&#10;      // to show movie popularity&#10;      const popularity = document.createElement('div');&#10;      popularity.className = 'movie-popularity';&#10;      popularity.textContent = `Popularity: ${item.popularity || 'N/A'}`;&#10;      li.appendChild(popularity);&#10;&#10;      ul.appendChild(li); // append list item to unordered list&#10;    });&#10;&#10;    movie.appendChild(ul);  // append unordered list to main container&#10;&#10;&#10;    // simple controls: Prev/Next pagebuttons&#10;&#10;    const pageNumberbutton = document.createElement('div');&#10;    pageNumberbutton.className = 'pagination-controls';&#10;&#10;    // show page navigation buttons (uncomment to enable)&#10;    const prev = document.createElement('button');&#10;    prev.textContent = 'Prev';&#10;    prev.disabled = currentPage === 1;  // disable prev button when current page is  first page&#10;    prev.addEventListener('click', () =&gt; renderPage(currentPage - 1));&#10;    /*we are adding an event listener to the prev button so that when it is clicked,&#10;    it will call the renderPage function with the current page number decremented by 1.*/&#10;    pageNumberbutton.appendChild(prev);   // append prev button to pagination controls&#10;&#10;    // show only page number info without prev/next buttons&#10;    const pageInfo = document.createElement('span');&#10;    pageInfo.textContent = ` Page ${currentPage} of ${totalPages} `;&#10;    pageNumberbutton.appendChild(pageInfo);&#10;&#10;    // show next button&#10;    const next = document.createElement('button');&#10;    next.textContent = 'Next';&#10;    next.disabled = currentPage === totalPages;  // disable next button when current page is last page&#10;    next.addEventListener('click', () =&gt; renderPage(currentPage + 1));&#10;    /* we are adding event listner to the next page , onClick to next button it will call&#10;    renderPage Function with current page number increased by 1*/&#10;    pageNumberbutton.appendChild(next);&#10;&#10;    movie.appendChild(pageNumberbutton);&#10;  }&#10;&#10;  // initial render&#10;  renderPage(1);&#10;&#10;  // attach a single click listener to the logo (outside renderPage) so clicking it shows page 1&#10;  if (logo) {&#10;    logo.addEventListener('click', (e) =&gt; {&#10;      e.preventDefault &amp;&amp; e.preventDefault();&#10;      renderPage(1);&#10;    });&#10;  }&#10;&#10;}&#10;&#10;// invoke and handle errors without try/catch inside the function&#10;movieData().catch(err =&gt; {&#10;  console.error(err);&#10;  if (movie) movie.textContent = 'Failed to load movies.';&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>